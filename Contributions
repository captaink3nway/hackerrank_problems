Hello this is where you can submit the solutions 
given below is the format for submitting 
a person can have many inputs or many solutions 
#### Name (github)
-problem name
###
.
code
.
###
#### R.Narayan (https://github.com/R-Narayan)
-validating email
###
import re
s=input()#to input many emails
c=re.findall(r'\w+@\w+mail\.com',s)
print (c)
###
-Itertools
###
from itertools import product

a = list(map(int, input().split()))
b = list(map(int, input().split()))

print(*product(a, b))


#### R.Narayan (https://github.com/R-Narayan)
-validating email
###
import re
s=input()#to input many emails
c=re.match(r'\w+@\w+mail\.com',s)
print (c)
###

#### GauthamSree(https://github.com/GauthamSree)
- Find the runner-Up Score
###
n = int(input())
arr = map(int, input().split())
print(sorted(list(set(arr)))[-2])
###
#### GauthamSree(https://github.com/GauthamSree)
- Nested list
###
if __name__ == '__main__':
    l = []
    m = []
    def mini(m):
        mi = m[0]
        for i in m:
            if i != mi:
                return i
    for _ in range(int(input())):
        name = input()
        score = float(input())
        l.append(name)
        m.append(score)
    for i in range(len(m)):
        for j in range(len(m)-i-1):
            if m[j] > m[j+1]:
                m[j], m[j+1] = m[j+1], m[j]
                l[j], l[j+1] = l[j+1], l[j]
    
    k = mini(m)
    a = []
    for i in range(len(m)):
        if m[i]==k:
            a.append(l[i])
    a.sort()
    for i in a:
        print(i)

###

#### GauthamSree(https://github.com/GauthamSree)
- Finding percentage 
###
if __name__ == '__main__':
    n = int(input())
    student_marks = {}
    stud_avg = {}
    for _ in range(n):
        name, *line = input().split()
        scores = list(map(float, line))
        student_marks[name] = scores
    query_name = input()
    for k,v in student_marks.items():
        s = 0
        for i in v:
            s += i
        avg = s/len(v)
        stud_avg[k] = avg
    print(format(stud_avg[query_name],'.2f'))
###
#### GauthamSree(https://github.com/GauthamSree)
- Write a function
###
def is_leap(year):
    leap = False
    if year%4==0 and year%100!=0:
        leap = True
    elif year%400==0:
        leap = True
    else:
        leap = False
    # Write your logic here
    
    return leap
###

#### R.Narayan (https://github.com/R-Narayan)
-validating email
###
import re
s=input()#to input many emails
c=re.match(r'\w+@\w+mail\.com',s)
print (c)
###
#### GauravPoosarla(https://github.com/GauravPoosarla)
-Sorting Array of strings
###

int lexicographic_sort(const char* a, const char* b) {
    return strcmp(a, b);

}

int lexicographic_sort_reverse(const char* a, const char* b) {
     return strcmp(b, a);
    
}

int characters_count(const char *s){
    int n = 0;
    int count[128] = {0};
    if (NULL == s){
        return -1;
    }
    while(*s != '\0'){
        if (!count[*s]){
            count[*s]++;
            n++;
        }
        s++;
    }
    return n;
}


int sort_by_number_of_distinct_characters(const char* a, const char* b) {
    int con = characters_count(a) - characters_count(b);
    return (con ? con : lexicographic_sort(a, b));
    
}

int sort_by_length(const char* a, const char* b) {
    int len = strlen(a) - strlen(b);
    return (len ? len : lexicographic_sort(a, b));
}



void string_sort(char** arr,const int len,int (*cmp_func)(const char* a, const char* b)){
    int mid = len / 2;
    int con = 0;
    while(!con){
        con = 1;
        for(int i = 0; i < len - 1; i++){
            if(cmp_func(arr[i], arr[i + 1]) > 0) {
                char *temp = arr[i];
                arr[i] = arr[i + 1];
                arr[i + 1] = temp;
                con = 0;
            }
        }
    }
}

#### GauravPoosarla(https://github.com/GauravPoosarla)
-Permutation of Strings
###
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int next_permutation(int n, char **s)
{
	/**
	* Complete this method
	* Return 0 when there is no next permutation and 1 otherwise
	* Modify array s to its next permutation
	*/
    
    // Find non-increasing suffix
    int i = n-1;
    while(i>0 && strcmp(s[i-1],s[i])>=0) 
        i--;    // find key
    if (i<=0) return 0;
    
    // Swap key with its successor in suffix
    int j = n-1;
    while(strcmp(s[i-1],s[j])>=0) 
        j--;    // find rightmost successor to key
    char *tmp = s[i-1];
    s[i-1] = s[j];
    s[j] = tmp;
    
    // Reverse the suffix
    j = n-1;
    while(i<j) {
        tmp = s[i];
        s[i] = s[j];
        s[j] = tmp;
        i++;
        j--;
    }
    return 1;
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int next_permutation(int n, char **s)
{
	/**
	* Complete this method
	* Return 0 when there is no next permutation and 1 otherwise
	* Modify array s to its next permutation
	*/
    
    // Find non-increasing suffix
    int i = n-1;
    while(i>0 && strcmp(s[i-1],s[i])>=0) 
        i--;    // find key
    if (i<=0) return 0;
    
    // Swap key with its successor in suffix
    int j = n-1;
    while(strcmp(s[i-1],s[j])>=0) 
        j--;    // find rightmost successor to key
    char *tmp = s[i-1];
    s[i-1] = s[j];
    s[j] = tmp;
    
    // Reverse the suffix
    j = n-1;
    while(i<j) {
        tmp = s[i];
        s[i] = s[j];
        s[j] = tmp;
        i++;
        j--;
    }
    return 1;

}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int next_permutation(int n, char **s)
{
	/**
	* Complete this method
	* Return 0 when there is no next permutation and 1 otherwise
	* Modify array s to its next permutation
	*/
    
    // Find non-increasing suffix
    int i = n-1;
    while(i>0 && strcmp(s[i-1],s[i])>=0) 
        i--;    // find key
    if (i<=0) return 0;
    
    // Swap key with its successor in suffix
    int j = n-1;
    while(strcmp(s[i-1],s[j])>=0) 
        j--;    // find rightmost successor to key
    char *tmp = s[i-1];
    s[i-1] = s[j];
    s[j] = tmp;
    
    // Reverse the suffix
    j = n-1;
    while(i<j) {
        tmp = s[i];
        s[i] = s[j];
        s[j] = tmp;
        i++;
        j--;
    }
    return 1;

}

#### GauravPoosarla(https://github.com/GauravPoosarla)
-Calculate nth term
###
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
//Complete the following function.

int find_nth_term(int n, int a, int b, int c) {
    
    if(n == 1)
        return a;
    else if (n == 2)
        return b;
    else if (n == 3)
        return c;
    
    return find_nth_term(n-1,a,b,c)+find_nth_term(n-2,a,b,c)+find_nth_term(n-3,a,b,c);

}

int main() {
    int n, a, b, c;
    
  
    scanf("%d %d %d %d", &n, &a, &b, &c);
    int ans = find_nth_term(n, a, b, c);
 
    printf("%d", ans); 
    return 0;
}

#### GauravPoosarla(https://github.com/GauravPoosarla)
-Boxes through a tunnel
###

struct box
{
    /**
    * Define three fields of type int: length, width and height
    */
    int length; 
    int width; 
    int height; 
};

typedef struct box box;

int get_volume(box b) {
    /**
    * Return the volume of the box
    */
    return b.length * b.width * b.height; 
}

int is_lower_than_max_height(box b) {
    /**
    * Return 1 if the box's height is lower than MAX_HEIGHT and 0 otherwise
    */

    if(b.height <41){
        return 1; 
    } else {
        return 0; 
    }

}

#### GauravPoosarla(https://github.com/GauravPoosarla)
-Small Triangles, Large Triangles
###

int heron(triangle *t){
    int twop=t->a+t->b+t->c;
    return twop*(twop-2*t->a)*(twop-2*t->b)*(twop-2*t->c);
}

int heron_comp(const void *a, const void *b){
    return heron((triangle*)a) - heron((triangle*)b);
}

void sort_by_area(triangle* tr, int n) {
    qsort(tr, n, sizeof(*tr), heron_comp);
}

#### GauravPoosarla(https://github.com/GauravPoosarla)
-Pointers in C
###

#include <stdio.h>
void update(int *a,int *b) {

    // Complete this function    
    *a= *a + *b;
    *b= abs(*a - 2*(*b));
    
    
}

int main() {
    int a, b;
    int *pa = &a, *pb = &b;
    
    scanf("%d %d", &a, &b);
    update(pa, pb);
    printf("%d\n%d", a, b);

    return 0;
}

#### GauravPoosarla(https://github.com/GauravPoosarla)
-Dynamic array in C
###




int main()
{
    int total_number_of_shelves;
    scanf("%d", &total_number_of_shelves);

    total_number_of_books = calloc(total_number_of_shelves, sizeof(int));

    int total_number_of_queries;
    scanf("%d", &total_number_of_queries);

    total_number_of_pages = malloc(total_number_of_shelves * sizeof(int *));
    for (int i = 0; i < total_number_of_shelves; i++) {
        total_number_of_pages[i] = calloc(1100, sizeof(int));
    }

    while (total_number_of_queries--) {
        int type_of_query;
        scanf("%d", &type_of_query);

        if (type_of_query == 1) {
            /*
             * Process the query of first type here.
             */
            int shelf, pages;
            scanf("%d %d", &shelf, &pages);
            total_number_of_books[shelf]++;
            int *book = total_number_of_pages[shelf];
            while (*book != 0)
                book++;
            *book = pages;
                    
#### SahilKumar(https://github.com/sahilsync07)
-Arithmetic Operators
###
if _name_ == '_main_':
    a = int(input())
    b = int(input())
    print(a+b)
    print(a-b)
    print(a*b) 
#### SahilKumar(https://github.com/sahilsync07)
-loops
###
if _name_ == '_main_':
    n = int(input())
    for i in range(0,n):
        print(i**2) 
#### SahilKumar(https://github.com/sahilsync07)
-finding the percentage
###
if _name_ == '_main_':
    n = int(input())
    student_marks = {}

    for _ in range(n):
        name, *line = input().split()
        scores = list(map(float, line))
        student_marks[name] = scores
    query_name = input()

    if query_name in student_marks:
        x = ((float(student_marks[query_name][0]) + 
           float(student_marks[query_name][1]) + 
           float(student_marks[query_name][2])) / 3)

    print('%.2f' % x)













